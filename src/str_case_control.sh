#!/bin/bash
# eh_merge_folder 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {
    tmp_dir="tmp"
    mkdir -p $tmp_dir
    mkdir -p "QC"
    mkdir -p "results/chunks"
    dx download "$vcf_file" -o input_file
    dx download "$vcf_file_index" -o input_file.csi
    dx download "$covar_pheno" -o "covar_pheno.tsv"
    bcftools view --trim-alt-alleles input_file -r $chr --threads 2 -Oz -o QC/${chr}_trimmed.vcf.gz
    bcftools query -l input_file > samples_list.txt
    bcftools query -f '%VARID\t%ALT[\t%GT]\n' QC/${chr}_trimmed.vcf.gz > QC/full_QC.genotypes.tsv
    awk -F'\t' -v OFS='\t' '{
    # Process the alternate allele lengths for the second column
    gsub(/<STR/, "", $2);  # Remove the <STR prefix
    gsub(/>/, "", $2);     # Remove the > suffix

    # Process each genotype column starting from the third
    for (i = 3; i <= NF; i++) {
        # Replace "./." with "NA/NA" in genotype columns
        if ($i == "./.") $i = "NA/NA";
    }

    # Print the modified line with the variant ID, modified allele lengths, and genotypes
    print;
    }' QC/full_QC.genotypes.tsv > QC/processed_genotypes_corrected.tsv
    awk 'BEGIN {FS="\t"; OFS="\t"}
    {
      # Split the alt alleles and get the count
      n = split($2, alleles, ",");
      
      printf $1 OFS $2; # Print variant identifier and alt alleles
      
      for (i = 3; i <= NF; i++) { # Iterate over genotypes
      # If the genotype is NA/NA, output as many NAs as there are alt alleles, separated by commas
            if ($i == "NA/NA") {
                na_out = "NA";
                for (j = 2; j <= n; j++) {
                    na_out = na_out ",NA"; # Append ",NA" for each additional alt allele
                }
                printf OFS na_out;
      continue;
            } else {
                split($i, g, "/"); # Split genotype into alleles
    
                # Initialize or reset counts for each allele
                delete counts;
                for (j = 1; j <= n; j++) counts[j] = 0;
    
                # Increment counts for the alleles found in the genotype
                if (g[1] > 0) counts[g[1]]++;
                if (g[2] > 0) counts[g[2]]++;
    
                # Construct and print output string with counts
                printf OFS counts[1]; # Print the first count
                for (k = 2; k <= n; k++) printf "," counts[k]; # Print remaining counts
            }
        }
        printf "\n"; # Move to the next line/variant
    }' QC/processed_genotypes_corrected.tsv > QC/allele_counts_genotypes.tsv
    awk 'BEGIN { FS="\t"}
    {
      n = split($2, alleles, ",")
      isMonomorphic = 1
      if (n > 1) { isMonomorphic = 0 }  # Automatically not monomorphic if more than 1 allele
      else {
        for (i = 3; i <= NF && isMonomorphic; i++) {  # Iterate through genotype counts
          split($i, counts, ",")
          for (j in counts) {
            if (counts[j] != "0") {  # Check if any count is not "0"
              isMonomorphic = 0
              break
            }
          }
          if (isMonomorphic == 0) break  # Exit if found polymorphic
        }
      }
      if (!isMonomorphic) {  # If variant is polymorphic, process it
        fileName = "QC/" n "_alt_alleles.txt"
        print $0 > fileName
      }
    }' QC/allele_counts_genotypes.tsv
    

    Rscript assoc.R $min_ac
    head "results/chunks/1_no_alts_results.tsv"
    
    
   
    
    final_file="results/final_combined_regression_results.tsv"
    filename_after_upload=${chr}_regression_results.tsv
    output="${output_folder}/${filename_after_upload}"
    results_file=$(dx upload $final_file --brief --path "$output" -p)
    dx-jobutil-add-output merged_results "$results_file" --class=file
    
}
